// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/cloudflarereceiver/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the MockClient type
type MockClient struct {
	mock.Mock
}

// BuildEndpoint provides a mock function with given fields: baseURL, startTime, endTime
func (_m *MockClient) BuildEndpoint(baseURL string, startTime string, endTime string) string {
	ret := _m.Called(baseURL, startTime, endTime)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(baseURL, startTime, endTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MakeRequest provides a mock function with given fields: ctx, baseURL, startTime, endTime
func (_m *MockClient) MakeRequest(ctx context.Context, baseURL string, startTime string, endTime string) ([]*models.Log, error) {
	ret := _m.Called(ctx, baseURL, startTime, endTime)

	var r0 []*models.Log
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []*models.Log); ok {
		r0 = rf(ctx, baseURL, startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Log)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, baseURL, startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetEndpoint provides a mock function with given fields: endpoint
func (_m *MockClient) SetEndpoint(endpoint string) {
	_m.Called(endpoint)
}

type mockConstructorTestingTnewClient interface {
	mock.TestingT
	Cleanup(func())
}

// newClient creates a new instance of client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newClient(t mockConstructorTestingTnewClient) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
