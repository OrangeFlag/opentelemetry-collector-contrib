// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	common "github.com/streamnative/pulsarctl/pkg/pulsar/common"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/streamnative/pulsarctl/pkg/pulsar/utils"
)

// MockTopics is an autogenerated mock type for the MockTopics type
type MockTopics struct {
	mock.Mock
}

// Compact provides a mock function with given fields: _a0
func (_m *MockTopics) Compact(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompactStatus provides a mock function with given fields: _a0
func (_m *MockTopics) CompactStatus(_a0 utils.TopicName) (utils.LongRunningProcessStatus, error) {
	ret := _m.Called(_a0)

	var r0 utils.LongRunningProcessStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (utils.LongRunningProcessStatus, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) utils.LongRunningProcessStatus); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(utils.LongRunningProcessStatus)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) Create(_a0 utils.TopicName, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockTopics) Delete(_a0 utils.TopicName, _a1 bool, _a2 bool) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool, bool) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBacklogQuotaMap provides a mock function with given fields: topic, applied
func (_m *MockTopics) GetBacklogQuotaMap(topic utils.TopicName, applied bool) (map[utils.BacklogQuotaType]utils.BacklogQuota, error) {
	ret := _m.Called(topic, applied)

	var r0 map[utils.BacklogQuotaType]utils.BacklogQuota
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool) (map[utils.BacklogQuotaType]utils.BacklogQuota, error)); ok {
		return rf(topic, applied)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool) map[utils.BacklogQuotaType]utils.BacklogQuota); ok {
		r0 = rf(topic, applied)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[utils.BacklogQuotaType]utils.BacklogQuota)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName, bool) error); ok {
		r1 = rf(topic, applied)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBundleRange provides a mock function with given fields: _a0
func (_m *MockTopics) GetBundleRange(_a0 utils.TopicName) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompactionThreshold provides a mock function with given fields: topic, applied
func (_m *MockTopics) GetCompactionThreshold(topic utils.TopicName, applied bool) (int64, error) {
	ret := _m.Called(topic, applied)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool) (int64, error)); ok {
		return rf(topic, applied)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool) int64); ok {
		r0 = rf(topic, applied)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName, bool) error); ok {
		r1 = rf(topic, applied)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeduplicationStatus provides a mock function with given fields: _a0
func (_m *MockTopics) GetDeduplicationStatus(_a0 utils.TopicName) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDelayedDelivery provides a mock function with given fields: _a0
func (_m *MockTopics) GetDelayedDelivery(_a0 utils.TopicName) (*utils.DelayedDeliveryData, error) {
	ret := _m.Called(_a0)

	var r0 *utils.DelayedDeliveryData
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (*utils.DelayedDeliveryData, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) *utils.DelayedDeliveryData); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.DelayedDeliveryData)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDispatchRate provides a mock function with given fields: _a0
func (_m *MockTopics) GetDispatchRate(_a0 utils.TopicName) (*utils.DispatchRateData, error) {
	ret := _m.Called(_a0)

	var r0 *utils.DispatchRateData
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (*utils.DispatchRateData, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) *utils.DispatchRateData); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.DispatchRateData)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInactiveTopicPolicies provides a mock function with given fields: topic, applied
func (_m *MockTopics) GetInactiveTopicPolicies(topic utils.TopicName, applied bool) (utils.InactiveTopicPolicies, error) {
	ret := _m.Called(topic, applied)

	var r0 utils.InactiveTopicPolicies
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool) (utils.InactiveTopicPolicies, error)); ok {
		return rf(topic, applied)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool) utils.InactiveTopicPolicies); ok {
		r0 = rf(topic, applied)
	} else {
		r0 = ret.Get(0).(utils.InactiveTopicPolicies)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName, bool) error); ok {
		r1 = rf(topic, applied)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInternalInfo provides a mock function with given fields: _a0
func (_m *MockTopics) GetInternalInfo(_a0 utils.TopicName) (utils.ManagedLedgerInfo, error) {
	ret := _m.Called(_a0)

	var r0 utils.ManagedLedgerInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (utils.ManagedLedgerInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) utils.ManagedLedgerInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(utils.ManagedLedgerInfo)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInternalStats provides a mock function with given fields: _a0
func (_m *MockTopics) GetInternalStats(_a0 utils.TopicName) (utils.PersistentTopicInternalStats, error) {
	ret := _m.Called(_a0)

	var r0 utils.PersistentTopicInternalStats
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (utils.PersistentTopicInternalStats, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) utils.PersistentTopicInternalStats); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(utils.PersistentTopicInternalStats)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastMessageID provides a mock function with given fields: _a0
func (_m *MockTopics) GetLastMessageID(_a0 utils.TopicName) (utils.MessageID, error) {
	ret := _m.Called(_a0)

	var r0 utils.MessageID
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (utils.MessageID, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) utils.MessageID); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(utils.MessageID)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxConsumers provides a mock function with given fields: _a0
func (_m *MockTopics) GetMaxConsumers(_a0 utils.TopicName) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxProducers provides a mock function with given fields: _a0
func (_m *MockTopics) GetMaxProducers(_a0 utils.TopicName) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxUnackMessagesPerConsumer provides a mock function with given fields: _a0
func (_m *MockTopics) GetMaxUnackMessagesPerConsumer(_a0 utils.TopicName) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaxUnackMessagesPerSubscription provides a mock function with given fields: _a0
func (_m *MockTopics) GetMaxUnackMessagesPerSubscription(_a0 utils.TopicName) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageTTL provides a mock function with given fields: _a0
func (_m *MockTopics) GetMessageTTL(_a0 utils.TopicName) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadata provides a mock function with given fields: _a0
func (_m *MockTopics) GetMetadata(_a0 utils.TopicName) (utils.PartitionedTopicMetadata, error) {
	ret := _m.Called(_a0)

	var r0 utils.PartitionedTopicMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (utils.PartitionedTopicMetadata, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) utils.PartitionedTopicMetadata); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(utils.PartitionedTopicMetadata)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPartitionedStats provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) GetPartitionedStats(_a0 utils.TopicName, _a1 bool) (utils.PartitionedTopicStats, error) {
	ret := _m.Called(_a0, _a1)

	var r0 utils.PartitionedTopicStats
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool) (utils.PartitionedTopicStats, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool) utils.PartitionedTopicStats); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(utils.PartitionedTopicStats)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName, bool) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissions provides a mock function with given fields: _a0
func (_m *MockTopics) GetPermissions(_a0 utils.TopicName) (map[string][]common.AuthAction, error) {
	ret := _m.Called(_a0)

	var r0 map[string][]common.AuthAction
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (map[string][]common.AuthAction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) map[string][]common.AuthAction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]common.AuthAction)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPersistence provides a mock function with given fields: _a0
func (_m *MockTopics) GetPersistence(_a0 utils.TopicName) (*utils.PersistenceData, error) {
	ret := _m.Called(_a0)

	var r0 *utils.PersistenceData
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (*utils.PersistenceData, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) *utils.PersistenceData); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.PersistenceData)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublishRate provides a mock function with given fields: _a0
func (_m *MockTopics) GetPublishRate(_a0 utils.TopicName) (*utils.PublishRateData, error) {
	ret := _m.Called(_a0)

	var r0 *utils.PublishRateData
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (*utils.PublishRateData, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) *utils.PublishRateData); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.PublishRateData)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetention provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) GetRetention(_a0 utils.TopicName, _a1 bool) (*utils.RetentionPolicies, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *utils.RetentionPolicies
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool) (*utils.RetentionPolicies, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool) *utils.RetentionPolicies); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.RetentionPolicies)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName, bool) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStats provides a mock function with given fields: _a0
func (_m *MockTopics) GetStats(_a0 utils.TopicName) (utils.TopicStats, error) {
	ret := _m.Called(_a0)

	var r0 utils.TopicStats
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (utils.TopicStats, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) utils.TopicStats); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(utils.TopicStats)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantPermission provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockTopics) GrantPermission(_a0 utils.TopicName, _a1 string, _a2 []common.AuthAction) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, string, []common.AuthAction) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: _a0
func (_m *MockTopics) List(_a0 utils.NameSpaceName) ([]string, []string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(utils.NameSpaceName) ([]string, []string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.NameSpaceName) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.NameSpaceName) []string); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(utils.NameSpaceName) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Lookup provides a mock function with given fields: _a0
func (_m *MockTopics) Lookup(_a0 utils.TopicName) (utils.LookupData, error) {
	ret := _m.Called(_a0)

	var r0 utils.LookupData
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (utils.LookupData, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) utils.LookupData); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(utils.LookupData)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Offload provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) Offload(_a0 utils.TopicName, _a1 utils.MessageID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, utils.MessageID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OffloadStatus provides a mock function with given fields: _a0
func (_m *MockTopics) OffloadStatus(_a0 utils.TopicName) (utils.OffloadProcessStatus, error) {
	ret := _m.Called(_a0)

	var r0 utils.OffloadProcessStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (utils.OffloadProcessStatus, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) utils.OffloadProcessStatus); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(utils.OffloadProcessStatus)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveBacklogQuota provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) RemoveBacklogQuota(_a0 utils.TopicName, _a1 utils.BacklogQuotaType) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, utils.BacklogQuotaType) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveCompactionThreshold provides a mock function with given fields: _a0
func (_m *MockTopics) RemoveCompactionThreshold(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDeduplicationStatus provides a mock function with given fields: _a0
func (_m *MockTopics) RemoveDeduplicationStatus(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDelayedDelivery provides a mock function with given fields: _a0
func (_m *MockTopics) RemoveDelayedDelivery(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDispatchRate provides a mock function with given fields: _a0
func (_m *MockTopics) RemoveDispatchRate(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveInactiveTopicPolicies provides a mock function with given fields: _a0
func (_m *MockTopics) RemoveInactiveTopicPolicies(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveMaxConsumers provides a mock function with given fields: _a0
func (_m *MockTopics) RemoveMaxConsumers(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveMaxProducers provides a mock function with given fields: _a0
func (_m *MockTopics) RemoveMaxProducers(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveMaxUnackMessagesPerConsumer provides a mock function with given fields: _a0
func (_m *MockTopics) RemoveMaxUnackMessagesPerConsumer(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveMaxUnackMessagesPerSubscription provides a mock function with given fields: _a0
func (_m *MockTopics) RemoveMaxUnackMessagesPerSubscription(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveMessageTTL provides a mock function with given fields: _a0
func (_m *MockTopics) RemoveMessageTTL(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePersistence provides a mock function with given fields: _a0
func (_m *MockTopics) RemovePersistence(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemovePublishRate provides a mock function with given fields: _a0
func (_m *MockTopics) RemovePublishRate(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRetention provides a mock function with given fields: _a0
func (_m *MockTopics) RemoveRetention(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokePermission provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) RevokePermission(_a0 utils.TopicName, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetBacklogQuota provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockTopics) SetBacklogQuota(_a0 utils.TopicName, _a1 utils.BacklogQuota, _a2 utils.BacklogQuotaType) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, utils.BacklogQuota, utils.BacklogQuotaType) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCompactionThreshold provides a mock function with given fields: topic, threshold
func (_m *MockTopics) SetCompactionThreshold(topic utils.TopicName, threshold int64) error {
	ret := _m.Called(topic, threshold)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, int64) error); ok {
		r0 = rf(topic, threshold)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDeduplicationStatus provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) SetDeduplicationStatus(_a0 utils.TopicName, _a1 bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDelayedDelivery provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) SetDelayedDelivery(_a0 utils.TopicName, _a1 utils.DelayedDeliveryData) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, utils.DelayedDeliveryData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDispatchRate provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) SetDispatchRate(_a0 utils.TopicName, _a1 utils.DispatchRateData) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, utils.DispatchRateData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetInactiveTopicPolicies provides a mock function with given fields: topic, data
func (_m *MockTopics) SetInactiveTopicPolicies(topic utils.TopicName, data utils.InactiveTopicPolicies) error {
	ret := _m.Called(topic, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, utils.InactiveTopicPolicies) error); ok {
		r0 = rf(topic, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxConsumers provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) SetMaxConsumers(_a0 utils.TopicName, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxProducers provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) SetMaxProducers(_a0 utils.TopicName, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxUnackMessagesPerConsumer provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) SetMaxUnackMessagesPerConsumer(_a0 utils.TopicName, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxUnackMessagesPerSubscription provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) SetMaxUnackMessagesPerSubscription(_a0 utils.TopicName, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMessageTTL provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) SetMessageTTL(_a0 utils.TopicName, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPersistence provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) SetPersistence(_a0 utils.TopicName, _a1 utils.PersistenceData) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, utils.PersistenceData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetPublishRate provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) SetPublishRate(_a0 utils.TopicName, _a1 utils.PublishRateData) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, utils.PublishRateData) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRetention provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) SetRetention(_a0 utils.TopicName, _a1 utils.RetentionPolicies) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, utils.RetentionPolicies) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Terminate provides a mock function with given fields: _a0
func (_m *MockTopics) Terminate(_a0 utils.TopicName) (utils.MessageID, error) {
	ret := _m.Called(_a0)

	var r0 utils.MessageID
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) (utils.MessageID, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) utils.MessageID); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(utils.MessageID)
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unload provides a mock function with given fields: _a0
func (_m *MockTopics) Unload(_a0 utils.TopicName) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockTopics) Update(_a0 utils.TopicName, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockTopics interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTopics creates a new instance of MockTopics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTopics(t mockConstructorTestingTNewMockTopics) *MockTopics {
	mock := &MockTopics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
