// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	utils "github.com/streamnative/pulsarctl/pkg/pulsar/utils"
)

// MockTenants is an autogenerated mock type for the MockTenants type
type MockTenants struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *MockTenants) Create(_a0 utils.TenantData) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TenantData) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *MockTenants) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *MockTenants) Get(_a0 string) (utils.TenantData, error) {
	ret := _m.Called(_a0)

	var r0 utils.TenantData
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (utils.TenantData, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) utils.TenantData); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(utils.TenantData)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *MockTenants) List() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *MockTenants) Update(_a0 utils.TenantData) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TenantData) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockTenants interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTenants creates a new instance of MockTenants. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTenants(t mockConstructorTestingTNewMockTenants) *MockTenants {
	mock := &MockTenants{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
