// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	utils "github.com/streamnative/pulsarctl/pkg/pulsar/utils"
)

// MockSubscriptions is an autogenerated mock type for the MockSubscriptions type
type MockSubscriptions struct {
	mock.Mock
}

// ClearBacklog provides a mock function with given fields: _a0, _a1
func (_m *MockSubscriptions) ClearBacklog(_a0 utils.TopicName, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockSubscriptions) Create(_a0 utils.TopicName, _a1 string, _a2 utils.MessageID) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, string, utils.MessageID) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockSubscriptions) Delete(_a0 utils.TopicName, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpireAllMessages provides a mock function with given fields: _a0, _a1
func (_m *MockSubscriptions) ExpireAllMessages(_a0 utils.TopicName, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpireMessages provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockSubscriptions) ExpireMessages(_a0 utils.TopicName, _a1 string, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, string, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForceDelete provides a mock function with given fields: _a0, _a1
func (_m *MockSubscriptions) ForceDelete(_a0 utils.TopicName, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMessageByID provides a mock function with given fields: topic, ledgerID, entryID
func (_m *MockSubscriptions) GetMessageByID(topic utils.TopicName, ledgerID int64, entryID int64) (*utils.Message, error) {
	ret := _m.Called(topic, ledgerID, entryID)

	var r0 *utils.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, int64, int64) (*utils.Message, error)); ok {
		return rf(topic, ledgerID, entryID)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName, int64, int64) *utils.Message); ok {
		r0 = rf(topic, ledgerID, entryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName, int64, int64) error); ok {
		r1 = rf(topic, ledgerID, entryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0
func (_m *MockSubscriptions) List(_a0 utils.TopicName) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeekMessages provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockSubscriptions) PeekMessages(_a0 utils.TopicName, _a1 string, _a2 int) ([]*utils.Message, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*utils.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, string, int) ([]*utils.Message, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(utils.TopicName, string, int) []*utils.Message); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*utils.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.TopicName, string, int) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetCursorToMessageID provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockSubscriptions) ResetCursorToMessageID(_a0 utils.TopicName, _a1 string, _a2 utils.MessageID) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, string, utils.MessageID) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetCursorToTimestamp provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockSubscriptions) ResetCursorToTimestamp(_a0 utils.TopicName, _a1 string, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, string, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SkipMessages provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockSubscriptions) SkipMessages(_a0 utils.TopicName, _a1 string, _a2 int64) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.TopicName, string, int64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockSubscriptions interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSubscriptions creates a new instance of MockSubscriptions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSubscriptions(t mockConstructorTestingTNewMockSubscriptions) *MockSubscriptions {
	mock := &MockSubscriptions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
