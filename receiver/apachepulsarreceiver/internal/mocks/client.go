// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	pulsar "github.com/streamnative/pulsarctl/pkg/pulsar"
	utils "github.com/streamnative/pulsarctl/pkg/pulsar/utils"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// BrokerStats provides a mock function with given fields:
func (_m *MockClient) BrokerStats() pulsar.BrokerStats {
	ret := _m.Called()

	var r0 pulsar.BrokerStats
	if rf, ok := ret.Get(0).(func() pulsar.BrokerStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.BrokerStats)
		}
	}

	return r0
}

// Brokers provides a mock function with given fields:
func (_m *MockClient) Brokers() pulsar.Brokers {
	ret := _m.Called()

	var r0 pulsar.Brokers
	if rf, ok := ret.Get(0).(func() pulsar.Brokers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Brokers)
		}
	}

	return r0
}

// Clusters provides a mock function with given fields:
func (_m *MockClient) Clusters() pulsar.Clusters {
	ret := _m.Called()

	var r0 pulsar.Clusters
	if rf, ok := ret.Get(0).(func() pulsar.Clusters); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Clusters)
		}
	}

	return r0
}

// Functions provides a mock function with given fields:
func (_m *MockClient) Functions() pulsar.Functions {
	ret := _m.Called()

	var r0 pulsar.Functions
	if rf, ok := ret.Get(0).(func() pulsar.Functions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Functions)
		}
	}

	return r0
}

// FunctionsWorker provides a mock function with given fields:
func (_m *MockClient) FunctionsWorker() pulsar.FunctionsWorker {
	ret := _m.Called()

	var r0 pulsar.FunctionsWorker
	if rf, ok := ret.Get(0).(func() pulsar.FunctionsWorker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.FunctionsWorker)
		}
	}

	return r0
}

// Namespaces provides a mock function with given fields:
func (_m *MockClient) Namespaces() pulsar.Namespaces {
	ret := _m.Called()

	var r0 pulsar.Namespaces
	if rf, ok := ret.Get(0).(func() pulsar.Namespaces); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Namespaces)
		}
	}

	return r0
}

// NsIsolationPolicy provides a mock function with given fields:
func (_m *MockClient) NsIsolationPolicy() pulsar.NsIsolationPolicy {
	ret := _m.Called()

	var r0 pulsar.NsIsolationPolicy
	if rf, ok := ret.Get(0).(func() pulsar.NsIsolationPolicy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.NsIsolationPolicy)
		}
	}

	return r0
}

// Packages provides a mock function with given fields:
func (_m *MockClient) Packages() pulsar.Packages {
	ret := _m.Called()

	var r0 pulsar.Packages
	if rf, ok := ret.Get(0).(func() pulsar.Packages); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Packages)
		}
	}

	return r0
}

// ResourceQuotas provides a mock function with given fields:
func (_m *MockClient) ResourceQuotas() pulsar.ResourceQuotas {
	ret := _m.Called()

	var r0 pulsar.ResourceQuotas
	if rf, ok := ret.Get(0).(func() pulsar.ResourceQuotas); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.ResourceQuotas)
		}
	}

	return r0
}

// Schemas provides a mock function with given fields:
func (_m *MockClient) Schemas() pulsar.Schema {
	ret := _m.Called()

	var r0 pulsar.Schema
	if rf, ok := ret.Get(0).(func() pulsar.Schema); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Schema)
		}
	}

	return r0
}

// Sinks provides a mock function with given fields:
func (_m *MockClient) Sinks() pulsar.Sinks {
	ret := _m.Called()

	var r0 pulsar.Sinks
	if rf, ok := ret.Get(0).(func() pulsar.Sinks); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Sinks)
		}
	}

	return r0
}

// Sources provides a mock function with given fields:
func (_m *MockClient) Sources() pulsar.Sources {
	ret := _m.Called()

	var r0 pulsar.Sources
	if rf, ok := ret.Get(0).(func() pulsar.Sources); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Sources)
		}
	}

	return r0
}

// Subscriptions provides a mock function with given fields:
func (_m *MockClient) Subscriptions() pulsar.Subscriptions {
	ret := _m.Called()

	var r0 pulsar.Subscriptions
	if rf, ok := ret.Get(0).(func() pulsar.Subscriptions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Subscriptions)
		}
	}

	return r0
}

// Tenants provides a mock function with given fields:
func (_m *MockClient) Tenants() pulsar.Tenants {
	ret := _m.Called()

	var r0 pulsar.Tenants
	if rf, ok := ret.Get(0).(func() pulsar.Tenants); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Tenants)
		}
	}

	return r0
}

// Token provides a mock function with given fields:
func (_m *MockClient) Token() pulsar.Token {
	ret := _m.Called()

	var r0 pulsar.Token
	if rf, ok := ret.Get(0).(func() pulsar.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Token)
		}
	}

	return r0
}

// Topics provides a mock function with given fields:
func (_m *MockClient) Topics() pulsar.Topics {
	ret := _m.Called()

	var r0 pulsar.Topics
	if rf, ok := ret.Get(0).(func() pulsar.Topics); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pulsar.Topics)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewMockClient) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}


// Code generated by mockery v2.23.1. DO NOT EDIT.


// client is an autogenerated mock type for the client type
type MockReceiverClient struct {
	mock.Mock
}

// GetNameSpaces provides a mock function with given fields: tenants
func (_m *MockReceiverClient) GetNameSpaces(tenants []string) ([]string, error) {
	ret := _m.Called(tenants)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(tenants)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(tenants)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(tenants)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenants provides a mock function with given fields:
func (_m *MockReceiverClient) GetTenants() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicStats provides a mock function with given fields: topics
func (_m *MockReceiverClient) GetTopicStats(topics []string) (map[*utils.TopicName]utils.TopicStats, error) {
	ret := _m.Called(topics)

	var r0 map[*utils.TopicName]utils.TopicStats
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (map[*utils.TopicName]utils.TopicStats, error)); ok {
		return rf(topics)
	}
	if rf, ok := ret.Get(0).(func([]string) map[*utils.TopicName]utils.TopicStats); ok {
		r0 = rf(topics)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*utils.TopicName]utils.TopicStats)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(topics)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopics provides a mock function with given fields: namespaces
func (_m *MockReceiverClient) GetTopics(namespaces []string) ([]string, error) {
	ret := _m.Called(namespaces)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(namespaces)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(namespaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(namespaces)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewClient interface {
	mock.TestingT
	Cleanup(func())
}

// newClient creates a new instance of client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newClient(t mockConstructorTestingTnewClient) *MockReceiverClient {
	mock := &MockReceiverClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}