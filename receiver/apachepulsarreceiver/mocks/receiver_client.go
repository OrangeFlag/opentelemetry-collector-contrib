// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	utils "github.com/streamnative/pulsarctl/pkg/pulsar/utils"
	mock "github.com/stretchr/testify/mock"
)

// client is an autogenerated mock type for the client type
type client struct {
	mock.Mock
}

// GetNameSpaces provides a mock function with given fields: tenants
func (_m *client) GetNameSpaces(tenants []string) ([]string, error) {
	ret := _m.Called(tenants)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(tenants)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(tenants)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(tenants)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenants provides a mock function with given fields:
func (_m *client) GetTenants() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicStats provides a mock function with given fields: topics
func (_m *client) GetTopicStats(topics []string) (map[*utils.TopicName]utils.TopicStats, error) {
	ret := _m.Called(topics)

	var r0 map[*utils.TopicName]utils.TopicStats
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (map[*utils.TopicName]utils.TopicStats, error)); ok {
		return rf(topics)
	}
	if rf, ok := ret.Get(0).(func([]string) map[*utils.TopicName]utils.TopicStats); ok {
		r0 = rf(topics)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[*utils.TopicName]utils.TopicStats)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(topics)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopics provides a mock function with given fields: namespaces
func (_m *client) GetTopics(namespaces []string) ([]string, error) {
	ret := _m.Called(namespaces)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(namespaces)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(namespaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(namespaces)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewClient interface {
	mock.TestingT
	Cleanup(func())
}

// newClient creates a new instance of client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newClient(t mockConstructorTestingTnewClient) *client {
	mock := &client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
