// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"fmt"
	"strconv"
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricSettings) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms, confmap.WithErrorUnused())
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsSettings provides settings for flumereceiver metrics.
type MetricsSettings struct {
	FlumeChannelSize            MetricSettings `mapstructure:"flume.channel_size"`
	FlumeConnectionClosedCount  MetricSettings `mapstructure:"flume.connection_closed_count"`
	FlumeConnectionCreatedCount MetricSettings `mapstructure:"flume.connection_created_count"`
	FlumeEventAcceptedCount     MetricSettings `mapstructure:"flume.event_accepted_count"`
	FlumeEventPutSuccessCount   MetricSettings `mapstructure:"flume.event_put_success_count"`
	FlumeEventTakeSuccessCount  MetricSettings `mapstructure:"flume.event_take_success_count"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		FlumeChannelSize: MetricSettings{
			Enabled: true,
		},
		FlumeConnectionClosedCount: MetricSettings{
			Enabled: true,
		},
		FlumeConnectionCreatedCount: MetricSettings{
			Enabled: true,
		},
		FlumeEventAcceptedCount: MetricSettings{
			Enabled: true,
		},
		FlumeEventPutSuccessCount: MetricSettings{
			Enabled: true,
		},
		FlumeEventTakeSuccessCount: MetricSettings{
			Enabled: true,
		},
	}
}

// ResourceAttributeSettings provides common settings for a particular metric.
type ResourceAttributeSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// ResourceAttributesSettings provides settings for flumereceiver metrics.
type ResourceAttributesSettings struct {
}

func DefaultResourceAttributesSettings() ResourceAttributesSettings {
	return ResourceAttributesSettings{}
}

type metricFlumeChannelSize struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills flume.channel_size metric with initial data.
func (m *metricFlumeChannelSize) init() {
	m.data.SetName("flume.channel_size")
	m.data.SetDescription("The number of events currently in the Memory channel")
	m.data.SetUnit("{events}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricFlumeChannelSize) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricFlumeChannelSize) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricFlumeChannelSize) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricFlumeChannelSize(settings MetricSettings) metricFlumeChannelSize {
	m := metricFlumeChannelSize{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricFlumeConnectionClosedCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills flume.connection_closed_count metric with initial data.
func (m *metricFlumeConnectionClosedCount) init() {
	m.data.SetName("flume.connection_closed_count")
	m.data.SetDescription("The number of connections closed by the RollingFile sink")
	m.data.SetUnit("{connections}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricFlumeConnectionClosedCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricFlumeConnectionClosedCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricFlumeConnectionClosedCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricFlumeConnectionClosedCount(settings MetricSettings) metricFlumeConnectionClosedCount {
	m := metricFlumeConnectionClosedCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricFlumeConnectionCreatedCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills flume.connection_created_count metric with initial data.
func (m *metricFlumeConnectionCreatedCount) init() {
	m.data.SetName("flume.connection_created_count")
	m.data.SetDescription("The number of connections created by the RollingFile sink")
	m.data.SetUnit("{connections}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricFlumeConnectionCreatedCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricFlumeConnectionCreatedCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricFlumeConnectionCreatedCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricFlumeConnectionCreatedCount(settings MetricSettings) metricFlumeConnectionCreatedCount {
	m := metricFlumeConnectionCreatedCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricFlumeEventAcceptedCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills flume.event_accepted_count metric with initial data.
func (m *metricFlumeEventAcceptedCount) init() {
	m.data.SetName("flume.event_accepted_count")
	m.data.SetDescription("The number of events created by the SeqGen source that are accepted")
	m.data.SetUnit("{events}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricFlumeEventAcceptedCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricFlumeEventAcceptedCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricFlumeEventAcceptedCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricFlumeEventAcceptedCount(settings MetricSettings) metricFlumeEventAcceptedCount {
	m := metricFlumeEventAcceptedCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricFlumeEventPutSuccessCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills flume.event_put_success_count metric with initial data.
func (m *metricFlumeEventPutSuccessCount) init() {
	m.data.SetName("flume.event_put_success_count")
	m.data.SetDescription("The number of successful events put into the sink by the Memory channel")
	m.data.SetUnit("{events}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricFlumeEventPutSuccessCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricFlumeEventPutSuccessCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricFlumeEventPutSuccessCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricFlumeEventPutSuccessCount(settings MetricSettings) metricFlumeEventPutSuccessCount {
	m := metricFlumeEventPutSuccessCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricFlumeEventTakeSuccessCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills flume.event_take_success_count metric with initial data.
func (m *metricFlumeEventTakeSuccessCount) init() {
	m.data.SetName("flume.event_take_success_count")
	m.data.SetDescription("The number of successful events taken from the source by the Memory channel")
	m.data.SetUnit("{events}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricFlumeEventTakeSuccessCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricFlumeEventTakeSuccessCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricFlumeEventTakeSuccessCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricFlumeEventTakeSuccessCount(settings MetricSettings) metricFlumeEventTakeSuccessCount {
	m := metricFlumeEventTakeSuccessCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilderConfig is a structural subset of an otherwise 1-1 copy of metadata.yaml
type MetricsBuilderConfig struct {
	Metrics            MetricsSettings            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesSettings `mapstructure:"resource_attributes"`
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                         pcommon.Timestamp   // start time that will be applied to all recorded data points.
	metricsCapacity                   int                 // maximum observed number of metrics per resource.
	resourceCapacity                  int                 // maximum observed number of resource attributes.
	metricsBuffer                     pmetric.Metrics     // accumulates metrics data before emitting.
	buildInfo                         component.BuildInfo // contains version information
	resourceAttributesSettings        ResourceAttributesSettings
	metricFlumeChannelSize            metricFlumeChannelSize
	metricFlumeConnectionClosedCount  metricFlumeConnectionClosedCount
	metricFlumeConnectionCreatedCount metricFlumeConnectionCreatedCount
	metricFlumeEventAcceptedCount     metricFlumeEventAcceptedCount
	metricFlumeEventPutSuccessCount   metricFlumeEventPutSuccessCount
	metricFlumeEventTakeSuccessCount  metricFlumeEventTakeSuccessCount
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsSettings(),
		ResourceAttributes: DefaultResourceAttributesSettings(),
	}
}

func NewMetricsBuilderConfig(ms MetricsSettings, ras ResourceAttributesSettings) MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            ms,
		ResourceAttributes: ras,
	}
}

func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.CreateSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                         pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                     pmetric.NewMetrics(),
		buildInfo:                         settings.BuildInfo,
		resourceAttributesSettings:        mbc.ResourceAttributes,
		metricFlumeChannelSize:            newMetricFlumeChannelSize(mbc.Metrics.FlumeChannelSize),
		metricFlumeConnectionClosedCount:  newMetricFlumeConnectionClosedCount(mbc.Metrics.FlumeConnectionClosedCount),
		metricFlumeConnectionCreatedCount: newMetricFlumeConnectionCreatedCount(mbc.Metrics.FlumeConnectionCreatedCount),
		metricFlumeEventAcceptedCount:     newMetricFlumeEventAcceptedCount(mbc.Metrics.FlumeEventAcceptedCount),
		metricFlumeEventPutSuccessCount:   newMetricFlumeEventPutSuccessCount(mbc.Metrics.FlumeEventPutSuccessCount),
		metricFlumeEventTakeSuccessCount:  newMetricFlumeEventTakeSuccessCount(mbc.Metrics.FlumeEventTakeSuccessCount),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
	if mb.resourceCapacity < rm.Resource().Attributes().Len() {
		mb.resourceCapacity = rm.Resource().Attributes().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption func(ResourceAttributesSettings, pmetric.ResourceMetrics)

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return func(ras ResourceAttributesSettings, rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(rmo ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.Resource().Attributes().EnsureCapacity(mb.resourceCapacity)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/flumereceiver")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricFlumeChannelSize.emit(ils.Metrics())
	mb.metricFlumeConnectionClosedCount.emit(ils.Metrics())
	mb.metricFlumeConnectionCreatedCount.emit(ils.Metrics())
	mb.metricFlumeEventAcceptedCount.emit(ils.Metrics())
	mb.metricFlumeEventPutSuccessCount.emit(ils.Metrics())
	mb.metricFlumeEventTakeSuccessCount.emit(ils.Metrics())

	for _, op := range rmo {
		op(mb.resourceAttributesSettings, rm)
	}
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user settings, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(rmo ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(rmo...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordFlumeChannelSizeDataPoint adds a data point to flume.channel_size metric.
func (mb *MetricsBuilder) RecordFlumeChannelSizeDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for FlumeChannelSize, value was %s: %w", inputVal, err)
	}
	mb.metricFlumeChannelSize.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordFlumeConnectionClosedCountDataPoint adds a data point to flume.connection_closed_count metric.
func (mb *MetricsBuilder) RecordFlumeConnectionClosedCountDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for FlumeConnectionClosedCount, value was %s: %w", inputVal, err)
	}
	mb.metricFlumeConnectionClosedCount.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordFlumeConnectionCreatedCountDataPoint adds a data point to flume.connection_created_count metric.
func (mb *MetricsBuilder) RecordFlumeConnectionCreatedCountDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for FlumeConnectionCreatedCount, value was %s: %w", inputVal, err)
	}
	mb.metricFlumeConnectionCreatedCount.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordFlumeEventAcceptedCountDataPoint adds a data point to flume.event_accepted_count metric.
func (mb *MetricsBuilder) RecordFlumeEventAcceptedCountDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for FlumeEventAcceptedCount, value was %s: %w", inputVal, err)
	}
	mb.metricFlumeEventAcceptedCount.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordFlumeEventPutSuccessCountDataPoint adds a data point to flume.event_put_success_count metric.
func (mb *MetricsBuilder) RecordFlumeEventPutSuccessCountDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for FlumeEventPutSuccessCount, value was %s: %w", inputVal, err)
	}
	mb.metricFlumeEventPutSuccessCount.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// RecordFlumeEventTakeSuccessCountDataPoint adds a data point to flume.event_take_success_count metric.
func (mb *MetricsBuilder) RecordFlumeEventTakeSuccessCountDataPoint(ts pcommon.Timestamp, inputVal string) error {
	val, err := strconv.ParseInt(inputVal, 10, 64)
	if err != nil {
		return fmt.Errorf("failed to parse int64 for FlumeEventTakeSuccessCount, value was %s: %w", inputVal, err)
	}
	mb.metricFlumeEventTakeSuccessCount.recordDataPoint(mb.startTime, ts, val)
	return nil
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}
