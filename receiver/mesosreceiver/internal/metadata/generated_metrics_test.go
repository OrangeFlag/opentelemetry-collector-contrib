// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap/confmaptest"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testConfigCollection int

const (
	testSetDefault testConfigCollection = iota
	testSetAll
	testSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name      string
		configSet testConfigCollection
	}{
		{
			name:      "default",
			configSet: testSetDefault,
		},
		{
			name:      "all_set",
			configSet: testSetAll,
		},
		{
			name:      "none_set",
			configSet: testSetNone,
		},
	}
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopCreateSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadConfig(t, test.name), settings, WithStartTime(start))

			expectedWarnings := 0
			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMesosCPUUtilizationDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMesosGpuUtilizationDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMesosMemLimitDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMesosMemUtilizationDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMesosSlavesActiveCountDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMesosSlavesConnectedCountDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMesosSlavesDisconnectedCountDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMesosSlavesInactiveCountDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMesosTasksFailedCountDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMesosTasksFinishedCountDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordMesosUptimeDataPoint(ts, "1")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemLoad15mDataPoint(ts, "1")

			metrics := mb.Emit(WithMesosServerName("attr-val"), WithMesosServerPort("attr-val"))

			if test.configSet == testSetNone {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			attrCount := 0
			enabledAttrCount := 0
			attrVal, ok := rm.Resource().Attributes().Get("mesos.server.name")
			attrCount++
			assert.Equal(t, mb.resourceAttributesSettings.MesosServerName.Enabled, ok)
			if mb.resourceAttributesSettings.MesosServerName.Enabled {
				enabledAttrCount++
				assert.EqualValues(t, "attr-val", attrVal.Str())
			}
			attrVal, ok = rm.Resource().Attributes().Get("mesos.server.port")
			attrCount++
			assert.Equal(t, mb.resourceAttributesSettings.MesosServerPort.Enabled, ok)
			if mb.resourceAttributesSettings.MesosServerPort.Enabled {
				enabledAttrCount++
				assert.EqualValues(t, "attr-val", attrVal.Str())
			}
			assert.Equal(t, enabledAttrCount, rm.Resource().Attributes().Len())
			assert.Equal(t, attrCount, 2)

			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if test.configSet == testSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if test.configSet == testSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "mesos.cpu.utilization":
					assert.False(t, validatedMetrics["mesos.cpu.utilization"], "Found a duplicate in the metrics slice: mesos.cpu.utilization")
					validatedMetrics["mesos.cpu.utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Master percentage of allocated CPUs expressed as ratio [0-1].", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "mesos.gpu.utilization":
					assert.False(t, validatedMetrics["mesos.gpu.utilization"], "Found a duplicate in the metrics slice: mesos.gpu.utilization")
					validatedMetrics["mesos.gpu.utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Master percentage of allocated GPUs expressed as ratio [0-1].", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "mesos.mem.limit":
					assert.False(t, validatedMetrics["mesos.mem.limit"], "Found a duplicate in the metrics slice: mesos.mem.limit")
					validatedMetrics["mesos.mem.limit"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Master total memory in bytes.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "mesos.mem.utilization":
					assert.False(t, validatedMetrics["mesos.mem.utilization"], "Found a duplicate in the metrics slice: mesos.mem.utilization")
					validatedMetrics["mesos.mem.utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Master percentage of allocated memory expressed as ratio [0-1].", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "mesos.slaves.active.count":
					assert.False(t, validatedMetrics["mesos.slaves.active.count"], "Found a duplicate in the metrics slice: mesos.slaves.active.count")
					validatedMetrics["mesos.slaves.active.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of active agents/slaves running for the master.", ms.At(i).Description())
					assert.Equal(t, "{Slave}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "mesos.slaves.connected.count":
					assert.False(t, validatedMetrics["mesos.slaves.connected.count"], "Found a duplicate in the metrics slice: mesos.slaves.connected.count")
					validatedMetrics["mesos.slaves.connected.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of agents/slaves connected to the master.", ms.At(i).Description())
					assert.Equal(t, "{Slave}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "mesos.slaves.disconnected.count":
					assert.False(t, validatedMetrics["mesos.slaves.disconnected.count"], "Found a duplicate in the metrics slice: mesos.slaves.disconnected.count")
					validatedMetrics["mesos.slaves.disconnected.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of agents/slaves disconnected from the master", ms.At(i).Description())
					assert.Equal(t, "{Slave}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "mesos.slaves.inactive.count":
					assert.False(t, validatedMetrics["mesos.slaves.inactive.count"], "Found a duplicate in the metrics slice: mesos.slaves.inactive.count")
					validatedMetrics["mesos.slaves.inactive.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of agents/slaves that are inactive.", ms.At(i).Description())
					assert.Equal(t, "{Slave}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "mesos.tasks.failed.count":
					assert.False(t, validatedMetrics["mesos.tasks.failed.count"], "Found a duplicate in the metrics slice: mesos.tasks.failed.count")
					validatedMetrics["mesos.tasks.failed.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of tasks that were failed.", ms.At(i).Description())
					assert.Equal(t, "{Task}", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "mesos.tasks.finished.count":
					assert.False(t, validatedMetrics["mesos.tasks.finished.count"], "Found a duplicate in the metrics slice: mesos.tasks.finished.count")
					validatedMetrics["mesos.tasks.finished.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of tasks that were finished.", ms.At(i).Description())
					assert.Equal(t, "{Task}", ms.At(i).Unit())
					assert.Equal(t, true, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "mesos.uptime":
					assert.False(t, validatedMetrics["mesos.uptime"], "Found a duplicate in the metrics slice: mesos.uptime")
					validatedMetrics["mesos.uptime"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time master has been up in seconds.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				case "system.load.15m":
					assert.False(t, validatedMetrics["system.load.15m"], "Found a duplicate in the metrics slice: system.load.15m")
					validatedMetrics["system.load.15m"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "the average system load during the last 15 minutes expressed as ratio [0-1].", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.Equal(t, float64(1), dp.DoubleValue())
				}
			}
		})
	}
}

func loadConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, component.UnmarshalConfig(sub, &cfg))
	return cfg
}
