// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for nsxtreceiver metrics.
type MetricsSettings struct {
	NsxtInterfacePacketCount MetricSettings `mapstructure:"nsxt.interface.packet.count"`
	NsxtInterfaceThroughput  MetricSettings `mapstructure:"nsxt.interface.throughput"`
	NsxtNodeCacheMemoryUsage MetricSettings `mapstructure:"nsxt.node.cache.memory.usage"`
	NsxtNodeCPUUtilization   MetricSettings `mapstructure:"nsxt.node.cpu.utilization"`
	NsxtNodeDiskUsage        MetricSettings `mapstructure:"nsxt.node.disk.usage"`
	NsxtNodeDiskUtilization  MetricSettings `mapstructure:"nsxt.node.disk.utilization"`
	NsxtNodeMemoryUsage      MetricSettings `mapstructure:"nsxt.node.memory.usage"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		NsxtInterfacePacketCount: MetricSettings{
			Enabled: true,
		},
		NsxtInterfaceThroughput: MetricSettings{
			Enabled: true,
		},
		NsxtNodeCacheMemoryUsage: MetricSettings{
			Enabled: true,
		},
		NsxtNodeCPUUtilization: MetricSettings{
			Enabled: true,
		},
		NsxtNodeDiskUsage: MetricSettings{
			Enabled: true,
		},
		NsxtNodeDiskUtilization: MetricSettings{
			Enabled: true,
		},
		NsxtNodeMemoryUsage: MetricSettings{
			Enabled: true,
		},
	}
}

// AttributeCPUProcessClass specifies the a value cpu.process.class attribute.
type AttributeCPUProcessClass int

const (
	_ AttributeCPUProcessClass = iota
	AttributeCPUProcessClassDatapath
	AttributeCPUProcessClassServices
)

// String returns the string representation of the AttributeCPUProcessClass.
func (av AttributeCPUProcessClass) String() string {
	switch av {
	case AttributeCPUProcessClassDatapath:
		return "datapath"
	case AttributeCPUProcessClassServices:
		return "services"
	}
	return ""
}

// MapAttributeCPUProcessClass is a helper map of string to AttributeCPUProcessClass attribute value.
var MapAttributeCPUProcessClass = map[string]AttributeCPUProcessClass{
	"datapath": AttributeCPUProcessClassDatapath,
	"services": AttributeCPUProcessClassServices,
}

// AttributeDirection specifies the a value direction attribute.
type AttributeDirection int

const (
	_ AttributeDirection = iota
	AttributeDirectionReceived
	AttributeDirectionTransmitted
)

// String returns the string representation of the AttributeDirection.
func (av AttributeDirection) String() string {
	switch av {
	case AttributeDirectionReceived:
		return "received"
	case AttributeDirectionTransmitted:
		return "transmitted"
	}
	return ""
}

// MapAttributeDirection is a helper map of string to AttributeDirection attribute value.
var MapAttributeDirection = map[string]AttributeDirection{
	"received":    AttributeDirectionReceived,
	"transmitted": AttributeDirectionTransmitted,
}

// AttributeDiskState specifies the a value disk_state attribute.
type AttributeDiskState int

const (
	_ AttributeDiskState = iota
	AttributeDiskStateUsed
	AttributeDiskStateAvailable
)

// String returns the string representation of the AttributeDiskState.
func (av AttributeDiskState) String() string {
	switch av {
	case AttributeDiskStateUsed:
		return "used"
	case AttributeDiskStateAvailable:
		return "available"
	}
	return ""
}

// MapAttributeDiskState is a helper map of string to AttributeDiskState attribute value.
var MapAttributeDiskState = map[string]AttributeDiskState{
	"used":      AttributeDiskStateUsed,
	"available": AttributeDiskStateAvailable,
}

// AttributePacketType specifies the a value packet.type attribute.
type AttributePacketType int

const (
	_ AttributePacketType = iota
	AttributePacketTypeDropped
	AttributePacketTypeErrored
	AttributePacketTypeSuccess
)

// String returns the string representation of the AttributePacketType.
func (av AttributePacketType) String() string {
	switch av {
	case AttributePacketTypeDropped:
		return "dropped"
	case AttributePacketTypeErrored:
		return "errored"
	case AttributePacketTypeSuccess:
		return "success"
	}
	return ""
}

// MapAttributePacketType is a helper map of string to AttributePacketType attribute value.
var MapAttributePacketType = map[string]AttributePacketType{
	"dropped": AttributePacketTypeDropped,
	"errored": AttributePacketTypeErrored,
	"success": AttributePacketTypeSuccess,
}

type metricNsxtInterfacePacketCount struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills nsxt.interface.packet.count metric with initial data.
func (m *metricNsxtInterfacePacketCount) init() {
	m.data.SetName("nsxt.interface.packet.count")
	m.data.SetDescription("The number of packets flowing through the network interface on the node.")
	m.data.SetUnit("{packets}")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricNsxtInterfacePacketCount) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, directionAttributeValue string, packetTypeAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Direction, pcommon.NewValueString(directionAttributeValue))
	dp.Attributes().Insert(A.PacketType, pcommon.NewValueString(packetTypeAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricNsxtInterfacePacketCount) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricNsxtInterfacePacketCount) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricNsxtInterfacePacketCount(settings MetricSettings) metricNsxtInterfacePacketCount {
	m := metricNsxtInterfacePacketCount{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricNsxtInterfaceThroughput struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills nsxt.interface.throughput metric with initial data.
func (m *metricNsxtInterfaceThroughput) init() {
	m.data.SetName("nsxt.interface.throughput")
	m.data.SetDescription("The number of Bytes flowing through the network interface.")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricNsxtInterfaceThroughput) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, directionAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Direction, pcommon.NewValueString(directionAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricNsxtInterfaceThroughput) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricNsxtInterfaceThroughput) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricNsxtInterfaceThroughput(settings MetricSettings) metricNsxtInterfaceThroughput {
	m := metricNsxtInterfaceThroughput{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricNsxtNodeCacheMemoryUsage struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills nsxt.node.cache.memory.usage metric with initial data.
func (m *metricNsxtNodeCacheMemoryUsage) init() {
	m.data.SetName("nsxt.node.cache.memory.usage")
	m.data.SetDescription("The memory usage of the node's cache")
	m.data.SetUnit("KBy")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricNsxtNodeCacheMemoryUsage) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricNsxtNodeCacheMemoryUsage) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricNsxtNodeCacheMemoryUsage) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricNsxtNodeCacheMemoryUsage(settings MetricSettings) metricNsxtNodeCacheMemoryUsage {
	m := metricNsxtNodeCacheMemoryUsage{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricNsxtNodeCPUUtilization struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills nsxt.node.cpu.utilization metric with initial data.
func (m *metricNsxtNodeCPUUtilization) init() {
	m.data.SetName("nsxt.node.cpu.utilization")
	m.data.SetDescription("The average amount of CPU being used by the node.")
	m.data.SetUnit("%")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricNsxtNodeCPUUtilization) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, cpuProcessClassAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.CPUProcessClass, pcommon.NewValueString(cpuProcessClassAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricNsxtNodeCPUUtilization) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricNsxtNodeCPUUtilization) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricNsxtNodeCPUUtilization(settings MetricSettings) metricNsxtNodeCPUUtilization {
	m := metricNsxtNodeCPUUtilization{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricNsxtNodeDiskUsage struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills nsxt.node.disk.usage metric with initial data.
func (m *metricNsxtNodeDiskUsage) init() {
	m.data.SetName("nsxt.node.disk.usage")
	m.data.SetDescription("The amount of storage space used by the node.")
	m.data.SetUnit("By")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricNsxtNodeDiskUsage) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, diskStateAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.DiskState, pcommon.NewValueString(diskStateAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricNsxtNodeDiskUsage) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricNsxtNodeDiskUsage) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricNsxtNodeDiskUsage(settings MetricSettings) metricNsxtNodeDiskUsage {
	m := metricNsxtNodeDiskUsage{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricNsxtNodeDiskUtilization struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills nsxt.node.disk.utilization metric with initial data.
func (m *metricNsxtNodeDiskUtilization) init() {
	m.data.SetName("nsxt.node.disk.utilization")
	m.data.SetDescription("The percentage of storage space utilized.")
	m.data.SetUnit("%")
	m.data.SetDataType(pmetric.MetricDataTypeGauge)
}

func (m *metricNsxtNodeDiskUtilization) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricNsxtNodeDiskUtilization) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricNsxtNodeDiskUtilization) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricNsxtNodeDiskUtilization(settings MetricSettings) metricNsxtNodeDiskUtilization {
	m := metricNsxtNodeDiskUtilization{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricNsxtNodeMemoryUsage struct {
	data     pmetric.Metric // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills nsxt.node.memory.usage metric with initial data.
func (m *metricNsxtNodeMemoryUsage) init() {
	m.data.SetName("nsxt.node.memory.usage")
	m.data.SetDescription("The memory usage of the node")
	m.data.SetUnit("KBy")
	m.data.SetDataType(pmetric.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.MetricAggregationTemporalityCumulative)
}

func (m *metricNsxtNodeMemoryUsage) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricNsxtNodeMemoryUsage) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricNsxtNodeMemoryUsage) emit(metrics pmetric.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricNsxtNodeMemoryUsage(settings MetricSettings) metricNsxtNodeMemoryUsage {
	m := metricNsxtNodeMemoryUsage{settings: settings}
	if settings.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                      pcommon.Timestamp // start time that will be applied to all recorded data points.
	metricsCapacity                int               // maximum observed number of metrics per resource.
	resourceCapacity               int               // maximum observed number of resource attributes.
	metricsBuffer                  pmetric.Metrics   // accumulates metrics data before emitting.
	metricNsxtInterfacePacketCount metricNsxtInterfacePacketCount
	metricNsxtInterfaceThroughput  metricNsxtInterfaceThroughput
	metricNsxtNodeCacheMemoryUsage metricNsxtNodeCacheMemoryUsage
	metricNsxtNodeCPUUtilization   metricNsxtNodeCPUUtilization
	metricNsxtNodeDiskUsage        metricNsxtNodeDiskUsage
	metricNsxtNodeDiskUtilization  metricNsxtNodeDiskUtilization
	metricNsxtNodeMemoryUsage      metricNsxtNodeMemoryUsage
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(settings MetricsSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                      pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                  pmetric.NewMetrics(),
		metricNsxtInterfacePacketCount: newMetricNsxtInterfacePacketCount(settings.NsxtInterfacePacketCount),
		metricNsxtInterfaceThroughput:  newMetricNsxtInterfaceThroughput(settings.NsxtInterfaceThroughput),
		metricNsxtNodeCacheMemoryUsage: newMetricNsxtNodeCacheMemoryUsage(settings.NsxtNodeCacheMemoryUsage),
		metricNsxtNodeCPUUtilization:   newMetricNsxtNodeCPUUtilization(settings.NsxtNodeCPUUtilization),
		metricNsxtNodeDiskUsage:        newMetricNsxtNodeDiskUsage(settings.NsxtNodeDiskUsage),
		metricNsxtNodeDiskUtilization:  newMetricNsxtNodeDiskUtilization(settings.NsxtNodeDiskUtilization),
		metricNsxtNodeMemoryUsage:      newMetricNsxtNodeMemoryUsage(settings.NsxtNodeMemoryUsage),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
	if mb.resourceCapacity < rm.Resource().Attributes().Len() {
		mb.resourceCapacity = rm.Resource().Attributes().Len()
	}
}

// ResourceOption applies changes to provided resource.
type ResourceOption func(pcommon.Resource)

// WithNsxtInterfaceID sets provided value as "nsxt.interface.id" attribute for current resource.
func WithNsxtInterfaceID(val string) ResourceOption {
	return func(r pcommon.Resource) {
		r.Attributes().UpsertString("nsxt.interface.id", val)
	}
}

// WithNsxtNodeID sets provided value as "nsxt.node.id" attribute for current resource.
func WithNsxtNodeID(val string) ResourceOption {
	return func(r pcommon.Resource) {
		r.Attributes().UpsertString("nsxt.node.id", val)
	}
}

// WithNsxtNodeName sets provided value as "nsxt.node.name" attribute for current resource.
func WithNsxtNodeName(val string) ResourceOption {
	return func(r pcommon.Resource) {
		r.Attributes().UpsertString("nsxt.node.name", val)
	}
}

// WithNsxtNodeType sets provided value as "nsxt.node.type" attribute for current resource.
func WithNsxtNodeType(val string) ResourceOption {
	return func(r pcommon.Resource) {
		r.Attributes().UpsertString("nsxt.node.type", val)
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead. Resource attributes should be provided as ResourceOption arguments.
func (mb *MetricsBuilder) EmitForResource(ro ...ResourceOption) {
	rm := pmetric.NewResourceMetrics()
	rm.Resource().Attributes().EnsureCapacity(mb.resourceCapacity)
	for _, op := range ro {
		op(rm.Resource())
	}
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/nsxtreceiver")
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricNsxtInterfacePacketCount.emit(ils.Metrics())
	mb.metricNsxtInterfaceThroughput.emit(ils.Metrics())
	mb.metricNsxtNodeCacheMemoryUsage.emit(ils.Metrics())
	mb.metricNsxtNodeCPUUtilization.emit(ils.Metrics())
	mb.metricNsxtNodeDiskUsage.emit(ils.Metrics())
	mb.metricNsxtNodeDiskUtilization.emit(ils.Metrics())
	mb.metricNsxtNodeMemoryUsage.emit(ils.Metrics())
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user settings, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(ro ...ResourceOption) pmetric.Metrics {
	mb.EmitForResource(ro...)
	metrics := pmetric.NewMetrics()
	mb.metricsBuffer.MoveTo(metrics)
	return metrics
}

// RecordNsxtInterfacePacketCountDataPoint adds a data point to nsxt.interface.packet.count metric.
func (mb *MetricsBuilder) RecordNsxtInterfacePacketCountDataPoint(ts pcommon.Timestamp, val int64, directionAttributeValue AttributeDirection, packetTypeAttributeValue AttributePacketType) {
	mb.metricNsxtInterfacePacketCount.recordDataPoint(mb.startTime, ts, val, directionAttributeValue.String(), packetTypeAttributeValue.String())
}

// RecordNsxtInterfaceThroughputDataPoint adds a data point to nsxt.interface.throughput metric.
func (mb *MetricsBuilder) RecordNsxtInterfaceThroughputDataPoint(ts pcommon.Timestamp, val int64, directionAttributeValue AttributeDirection) {
	mb.metricNsxtInterfaceThroughput.recordDataPoint(mb.startTime, ts, val, directionAttributeValue.String())
}

// RecordNsxtNodeCacheMemoryUsageDataPoint adds a data point to nsxt.node.cache.memory.usage metric.
func (mb *MetricsBuilder) RecordNsxtNodeCacheMemoryUsageDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricNsxtNodeCacheMemoryUsage.recordDataPoint(mb.startTime, ts, val)
}

// RecordNsxtNodeCPUUtilizationDataPoint adds a data point to nsxt.node.cpu.utilization metric.
func (mb *MetricsBuilder) RecordNsxtNodeCPUUtilizationDataPoint(ts pcommon.Timestamp, val float64, cpuProcessClassAttributeValue AttributeCPUProcessClass) {
	mb.metricNsxtNodeCPUUtilization.recordDataPoint(mb.startTime, ts, val, cpuProcessClassAttributeValue.String())
}

// RecordNsxtNodeDiskUsageDataPoint adds a data point to nsxt.node.disk.usage metric.
func (mb *MetricsBuilder) RecordNsxtNodeDiskUsageDataPoint(ts pcommon.Timestamp, val int64, diskStateAttributeValue AttributeDiskState) {
	mb.metricNsxtNodeDiskUsage.recordDataPoint(mb.startTime, ts, val, diskStateAttributeValue.String())
}

// RecordNsxtNodeDiskUtilizationDataPoint adds a data point to nsxt.node.disk.utilization metric.
func (mb *MetricsBuilder) RecordNsxtNodeDiskUtilizationDataPoint(ts pcommon.Timestamp, val float64) {
	mb.metricNsxtNodeDiskUtilization.recordDataPoint(mb.startTime, ts, val)
}

// RecordNsxtNodeMemoryUsageDataPoint adds a data point to nsxt.node.memory.usage metric.
func (mb *MetricsBuilder) RecordNsxtNodeMemoryUsageDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricNsxtNodeMemoryUsage.recordDataPoint(mb.startTime, ts, val)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
	// CPUProcessClass (The CPU usage of the architecture allocated for either DPDK (datapath) or non-DPDK (services) processes.)
	CPUProcessClass string
	// Direction (The direction of network flow.)
	Direction string
	// DiskState (The state of storage space.)
	DiskState string
	// LoadBalancer (The name of the load balancer being utilized.)
	LoadBalancer string
	// PacketType (The type of packet counter.)
	PacketType string
}{
	"cpu.process.class",
	"direction",
	"state",
	"load_balancer",
	"type",
}

// A is an alias for Attributes.
var A = Attributes
