// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"fmt"
	"time"

	"go.opentelemetry.io/collector/model/pdata"
)

// MetricSettings provides common settings for a particular metric.
type MetricSettings struct {
	Enabled bool `mapstructure:"enabled"`
}

// MetricsSettings provides settings for hostmetricsreceiver/process metrics.
type MetricsSettings struct {
	ProcessCPUTime             MetricSettings `mapstructure:"process.cpu.time"`
	ProcessDiskIo              MetricSettings `mapstructure:"process.disk.io"`
	ProcessMemoryPhysicalUsage MetricSettings `mapstructure:"process.memory.physical_usage"`
	ProcessMemoryVirtualUsage  MetricSettings `mapstructure:"process.memory.virtual_usage"`
}

func DefaultMetricsSettings() MetricsSettings {
	return MetricsSettings{
		ProcessCPUTime: MetricSettings{
			Enabled: true,
		},
		ProcessDiskIo: MetricSettings{
			Enabled: true,
		},
		ProcessMemoryPhysicalUsage: MetricSettings{
			Enabled: true,
		},
		ProcessMemoryVirtualUsage: MetricSettings{
			Enabled: true,
		},
	}
}

type MetricIntf interface {
	GetName() string
	GetDescription() string
	GetUnit() string
	GetMetricType() MetricDataTypeMetadata
}

type MetricDataTypeMetadata struct {
	Sum   *Sum   `yaml:"sum"`
	Gauge *Gauge `yaml:"gauge"`
}

type Gauge struct {
	ValueType string
}

type Sum struct {
	Aggregation pdata.MetricAggregationTemporality
	Monotonic   bool
	ValueType   string
}

type metricProcessCPUTime struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills process.cpu.time metric with initial data.
func (m *metricProcessCPUTime) init() {
	m.data.SetName("process.cpu.time")
	m.data.SetDescription("Total CPU seconds broken down by different states.")
	m.data.SetUnit("s")
	m.data.SetDataType(pdata.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

type MetricMetadataProcessCPUTime struct{}

func (m MetricMetadataProcessCPUTime) GetName() string {
	return "process.cpu.time"
}

func (m MetricMetadataProcessCPUTime) GetDescription() string {
	return "Total CPU seconds broken down by different states."
}

func (m MetricMetadataProcessCPUTime) GetUnit() string {
	return "s"
}

func (m MetricMetadataProcessCPUTime) GetValueType() string {
	return "float64"
}

func (m MetricMetadataProcessCPUTime) GetMetricType() MetricDataTypeMetadata {
	return MetricDataTypeMetadata{
		Sum: &Sum{
			Aggregation: pdata.MetricAggregationTemporalityCumulative,
			Monotonic:   true,
			ValueType:   "Double",
		},
	}
}

func (m *metricProcessCPUTime) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val float64, stateAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleVal(val)
	dp.Attributes().Insert(A.State, pdata.NewValueString(stateAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricProcessCPUTime) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricProcessCPUTime) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricProcessCPUTime(settings MetricSettings) metricProcessCPUTime {
	m := metricProcessCPUTime{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricProcessDiskIo struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills process.disk.io metric with initial data.
func (m *metricProcessDiskIo) init() {
	m.data.SetName("process.disk.io")
	m.data.SetDescription("Disk bytes transferred.")
	m.data.SetUnit("By")
	m.data.SetDataType(pdata.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

type MetricMetadataProcessDiskIo struct{}

func (m MetricMetadataProcessDiskIo) GetName() string {
	return "process.disk.io"
}

func (m MetricMetadataProcessDiskIo) GetDescription() string {
	return "Disk bytes transferred."
}

func (m MetricMetadataProcessDiskIo) GetUnit() string {
	return "By"
}

func (m MetricMetadataProcessDiskIo) GetValueType() string {
	return "int64"
}

func (m MetricMetadataProcessDiskIo) GetMetricType() MetricDataTypeMetadata {
	return MetricDataTypeMetadata{
		Sum: &Sum{
			Aggregation: pdata.MetricAggregationTemporalityCumulative,
			Monotonic:   true,
			ValueType:   "Int",
		},
	}
}

func (m *metricProcessDiskIo) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val int64, directionAttributeValue string) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
	dp.Attributes().Insert(A.Direction, pdata.NewValueString(directionAttributeValue))
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricProcessDiskIo) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricProcessDiskIo) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricProcessDiskIo(settings MetricSettings) metricProcessDiskIo {
	m := metricProcessDiskIo{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricProcessMemoryPhysicalUsage struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills process.memory.physical_usage metric with initial data.
func (m *metricProcessMemoryPhysicalUsage) init() {
	m.data.SetName("process.memory.physical_usage")
	m.data.SetDescription("The amount of physical memory in use.")
	m.data.SetUnit("By")
	m.data.SetDataType(pdata.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
}

type MetricMetadataProcessMemoryPhysicalUsage struct{}

func (m MetricMetadataProcessMemoryPhysicalUsage) GetName() string {
	return "process.memory.physical_usage"
}

func (m MetricMetadataProcessMemoryPhysicalUsage) GetDescription() string {
	return "The amount of physical memory in use."
}

func (m MetricMetadataProcessMemoryPhysicalUsage) GetUnit() string {
	return "By"
}

func (m MetricMetadataProcessMemoryPhysicalUsage) GetValueType() string {
	return "int64"
}

func (m MetricMetadataProcessMemoryPhysicalUsage) GetMetricType() MetricDataTypeMetadata {
	return MetricDataTypeMetadata{
		Sum: &Sum{
			Aggregation: pdata.MetricAggregationTemporalityCumulative,
			Monotonic:   false,
			ValueType:   "Int",
		},
	}
}

func (m *metricProcessMemoryPhysicalUsage) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricProcessMemoryPhysicalUsage) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricProcessMemoryPhysicalUsage) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricProcessMemoryPhysicalUsage(settings MetricSettings) metricProcessMemoryPhysicalUsage {
	m := metricProcessMemoryPhysicalUsage{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

type metricProcessMemoryVirtualUsage struct {
	data     pdata.Metric   // data buffer for generated metric.
	settings MetricSettings // metric settings provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills process.memory.virtual_usage metric with initial data.
func (m *metricProcessMemoryVirtualUsage) init() {
	m.data.SetName("process.memory.virtual_usage")
	m.data.SetDescription("Virtual memory size.")
	m.data.SetUnit("By")
	m.data.SetDataType(pdata.MetricDataTypeSum)
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pdata.MetricAggregationTemporalityCumulative)
}

type MetricMetadataProcessMemoryVirtualUsage struct{}

func (m MetricMetadataProcessMemoryVirtualUsage) GetName() string {
	return "process.memory.virtual_usage"
}

func (m MetricMetadataProcessMemoryVirtualUsage) GetDescription() string {
	return "Virtual memory size."
}

func (m MetricMetadataProcessMemoryVirtualUsage) GetUnit() string {
	return "By"
}

func (m MetricMetadataProcessMemoryVirtualUsage) GetValueType() string {
	return "int64"
}

func (m MetricMetadataProcessMemoryVirtualUsage) GetMetricType() MetricDataTypeMetadata {
	return MetricDataTypeMetadata{
		Sum: &Sum{
			Aggregation: pdata.MetricAggregationTemporalityCumulative,
			Monotonic:   false,
			ValueType:   "Int",
		},
	}
}

func (m *metricProcessMemoryVirtualUsage) recordDataPoint(start pdata.Timestamp, ts pdata.Timestamp, val int64) {
	if !m.settings.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntVal(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricProcessMemoryVirtualUsage) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricProcessMemoryVirtualUsage) emit(metrics pdata.MetricSlice) {
	if m.settings.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricProcessMemoryVirtualUsage(settings MetricSettings) metricProcessMemoryVirtualUsage {
	m := metricProcessMemoryVirtualUsage{settings: settings}
	if settings.Enabled {
		m.data = pdata.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user settings.
type MetricsBuilder struct {
	startTime                        pdata.Timestamp // start time that will be applied to all recorded data points.
	metricsCapacity                  int             // maximum observed number of metrics per resource.
	resourceCapacity                 int             // maximum observed number of resource attributes.
	metricsBuffer                    pdata.Metrics   // accumulates metrics data before emitting.
	metricProcessCPUTime             metricProcessCPUTime
	metricProcessDiskIo              metricProcessDiskIo
	metricProcessMemoryPhysicalUsage metricProcessMemoryPhysicalUsage
	metricProcessMemoryVirtualUsage  metricProcessMemoryVirtualUsage
}

// metricBuilderOption applies changes to default metrics builder.
type metricBuilderOption func(*MetricsBuilder)

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pdata.Timestamp) metricBuilderOption {
	return func(mb *MetricsBuilder) {
		mb.startTime = startTime
	}
}

func NewMetricsBuilder(settings MetricsSettings, options ...metricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		startTime:                        pdata.NewTimestampFromTime(time.Now()),
		metricsBuffer:                    pdata.NewMetrics(),
		metricProcessCPUTime:             newMetricProcessCPUTime(settings.ProcessCPUTime),
		metricProcessDiskIo:              newMetricProcessDiskIo(settings.ProcessDiskIo),
		metricProcessMemoryPhysicalUsage: newMetricProcessMemoryPhysicalUsage(settings.ProcessMemoryPhysicalUsage),
		metricProcessMemoryVirtualUsage:  newMetricProcessMemoryVirtualUsage(settings.ProcessMemoryVirtualUsage),
	}
	for _, op := range options {
		op(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pdata.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
	if mb.resourceCapacity < rm.Resource().Attributes().Len() {
		mb.resourceCapacity = rm.Resource().Attributes().Len()
	}
}

// ResourceOption applies changes to provided resource.
type ResourceOption func(pdata.Resource)

// WithProcessCommand sets provided value as "process.command" attribute for current resource.
func WithProcessCommand(val string) ResourceOption {
	return func(r pdata.Resource) {
		r.Attributes().UpsertString("process.command", val)
	}
}

// WithProcessCommandLine sets provided value as "process.command_line" attribute for current resource.
func WithProcessCommandLine(val string) ResourceOption {
	return func(r pdata.Resource) {
		r.Attributes().UpsertString("process.command_line", val)
	}
}

// WithProcessExecutableName sets provided value as "process.executable.name" attribute for current resource.
func WithProcessExecutableName(val string) ResourceOption {
	return func(r pdata.Resource) {
		r.Attributes().UpsertString("process.executable.name", val)
	}
}

// WithProcessExecutablePath sets provided value as "process.executable.path" attribute for current resource.
func WithProcessExecutablePath(val string) ResourceOption {
	return func(r pdata.Resource) {
		r.Attributes().UpsertString("process.executable.path", val)
	}
}

// WithProcessOwner sets provided value as "process.owner" attribute for current resource.
func WithProcessOwner(val string) ResourceOption {
	return func(r pdata.Resource) {
		r.Attributes().UpsertString("process.owner", val)
	}
}

// WithProcessPid sets provided value as "process.pid" attribute for current resource.
func WithProcessPid(val int64) ResourceOption {
	return func(r pdata.Resource) {
		r.Attributes().UpsertInt("process.pid", val)
	}
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead. Resource attributes should be provided as ResourceOption arguments.
func (mb *MetricsBuilder) EmitForResource(ro ...ResourceOption) {
	rm := pdata.NewResourceMetrics()
	rm.Resource().Attributes().EnsureCapacity(mb.resourceCapacity)
	for _, op := range ro {
		op(rm.Resource())
	}
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("otelcol/hostmetricsreceiver/process")
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricProcessCPUTime.emit(ils.Metrics())
	mb.metricProcessDiskIo.emit(ils.Metrics())
	mb.metricProcessMemoryPhysicalUsage.emit(ils.Metrics())
	mb.metricProcessMemoryVirtualUsage.emit(ils.Metrics())
	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user settings, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(ro ...ResourceOption) pdata.Metrics {
	mb.EmitForResource(ro...)
	metrics := pdata.NewMetrics()
	mb.metricsBuffer.MoveTo(metrics)
	return metrics
}

// RecordProcessCPUTimeDataPoint adds a data point to process.cpu.time metric.
func (mb *MetricsBuilder) RecordProcessCPUTimeDataPoint(ts pdata.Timestamp, val float64, stateAttributeValue string) {
	mb.metricProcessCPUTime.recordDataPoint(mb.startTime, ts, val, stateAttributeValue)
}

// RecordProcessDiskIoDataPoint adds a data point to process.disk.io metric.
func (mb *MetricsBuilder) RecordProcessDiskIoDataPoint(ts pdata.Timestamp, val int64, directionAttributeValue string) {
	mb.metricProcessDiskIo.recordDataPoint(mb.startTime, ts, val, directionAttributeValue)
}

// RecordProcessMemoryPhysicalUsageDataPoint adds a data point to process.memory.physical_usage metric.
func (mb *MetricsBuilder) RecordProcessMemoryPhysicalUsageDataPoint(ts pdata.Timestamp, val int64) {
	mb.metricProcessMemoryPhysicalUsage.recordDataPoint(mb.startTime, ts, val)
}

// RecordProcessMemoryVirtualUsageDataPoint adds a data point to process.memory.virtual_usage metric.
func (mb *MetricsBuilder) RecordProcessMemoryVirtualUsageDataPoint(ts pdata.Timestamp, val int64) {
	mb.metricProcessMemoryVirtualUsage.recordDataPoint(mb.startTime, ts, val)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...metricBuilderOption) {
	mb.startTime = pdata.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op(mb)
	}
}

func (mb *MetricsBuilder) Record(metricName string, ts pdata.Timestamp, value interface{}, attributes ...string) error {
	switch metricName {

	case "process.cpu.time":
		floatVal, ok := value.(float64)
		if !ok {
			return fmt.Errorf("invalid data point value")
		}
		mb.RecordProcessCPUTimeDataPoint(ts, floatVal, attributes[0])
	case "process.disk.io":
		intVal, ok := value.(int64)
		if !ok {
			return fmt.Errorf("invalid data point value")
		}
		mb.RecordProcessDiskIoDataPoint(ts, intVal, attributes[0])
	case "process.memory.physical_usage":
		intVal, ok := value.(int64)
		if !ok {
			return fmt.Errorf("invalid data point value")
		}
		mb.RecordProcessMemoryPhysicalUsageDataPoint(ts, intVal)
	case "process.memory.virtual_usage":
		intVal, ok := value.(int64)
		if !ok {
			return fmt.Errorf("invalid data point value")
		}
		mb.RecordProcessMemoryVirtualUsageDataPoint(ts, intVal)
	}
	return nil
}

// Attributes contains the possible metric attributes that can be used.
var Attributes = struct {
	// Direction (Direction of flow of bytes (read or write).)
	Direction string
	// State (Breakdown of CPU usage by type.)
	State string
}{
	"direction",
	"state",
}

var metricsByName = map[string]MetricIntf{
	"process.cpu.time":              MetricMetadataProcessCPUTime{},
	"process.disk.io":               MetricMetadataProcessDiskIo{},
	"process.memory.physical_usage": MetricMetadataProcessMemoryPhysicalUsage{},
	"process.memory.virtual_usage":  MetricMetadataProcessMemoryVirtualUsage{},
}

func EnabledMetrics(settings MetricsSettings) map[string]bool {
	return map[string]bool{
		"process.cpu.time":              settings.ProcessCPUTime.Enabled,
		"process.disk.io":               settings.ProcessDiskIo.Enabled,
		"process.memory.physical_usage": settings.ProcessMemoryPhysicalUsage.Enabled,
		"process.memory.virtual_usage":  settings.ProcessMemoryVirtualUsage.Enabled,
	}
}

func ByName(n string) MetricIntf {
	return metricsByName[n]
}

// A is an alias for Attributes.
var A = Attributes

// AttributeDirection are the possible values that the attribute "direction" can have.
var AttributeDirection = struct {
	Read  string
	Write string
}{
	"read",
	"write",
}

// AttributeState are the possible values that the attribute "state" can have.
var AttributeState = struct {
	System string
	User   string
	Wait   string
}{
	"system",
	"user",
	"wait",
}
