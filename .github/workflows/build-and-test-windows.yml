name: build-and-test-windows
on:
  push:
    branches:
      - "main"
      - "releases/**"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  merge_group:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
    branches:
      - main
env:
  TEST_RESULTS: testbed/tests/results/junit/results.xml
  # Make sure to exit early if cache segment download times out after 2 minutes.
  # We limit cache download as a whole to 5 minutes.
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 2

# Do not cancel this workflow on main
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  windows-unittest-matrix:
    strategy:
      fail-fast: false
      matrix:
        group:
          - receiver-0
          - receiver-1
          - receiver-2
          - receiver-3
          - processor-0
          - processor-1
          - exporter-0
          - exporter-1
          - exporter-2
          - exporter-3
          - extension
          - connector
          - internal
          - pkg
          - cmd-0
          - cmd-1
          - other
    runs-on: windows-latest
    if: ${{ github.actor != 'dependabot[bot]' && (contains(github.event.pull_request.labels.*.name, 'Run Windows') || github.event_name == 'push' || github.event_name == 'merge_group') }}
    env:
      # Limit memory usage via GC environment variables to avoid OOM on GH runners, especially for `cmd/otelcontribcol`,
      # see https://github.com/open-telemetry/opentelemetry-collector-contrib/pull/28682#issuecomment-1802296776
      GOGC: 50
      GOMEMLIMIT: 2GiB
    steps:
      - uses: actions/checkout@v4
      - name: install IIS
        run: Install-WindowsFeature -name Web-Server -IncludeManagementTools
      - uses: actions/setup-go@v5
        with:
          go-version: "1.22.7"
          cache: false
      - name: Cache Go
        id: go-mod-cache
        timeout-minutes: 25
        uses: actions/cache@v4
        with:
          path: |
            ~\go\pkg\mod
            ~\AppData\Local\go-build
          key: go-build-cache-${{ runner.os }}-${{ matrix.group }}-go-${{ hashFiles('**/go.sum') }}
      - name: Ensure required ports in the dynamic range are available
        run: |
          & ${{ github.workspace }}\.github\workflows\scripts\win-required-ports.ps1
      - name: Build shared test tools
        # If component tests share Makefile targets they need to be added here to avoid
        # concurrent component tests clashing when building such targets. This applies
        # specifically to Windows, see https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/34691
        run: make "$(${PWD} -replace '\\', '/')/.tools/gotestsum"
      - name: Run Unit tests
        run: make -j2 gotest GROUP=${{ matrix.group }}
  windows-unittest:
    if: ${{ github.actor != 'dependabot[bot]' && (contains(github.event.pull_request.labels.*.name, 'Run Windows') || github.event_name == 'push' || github.event_name == 'merge_group') }}
    runs-on: windows-latest
    needs: [windows-unittest-matrix]
    steps:
      - name: Print result
        run: echo ${{ needs.windows-unittest-matrix.result }}
      - name: Interpret result
        shell: bash
        run: |
          if [[ success == ${{ needs.windows-unittest-matrix.result }} ]]
          then
            echo "All matrix jobs passed!"
          else
            echo "One or more matrix jobs failed."
            false
          fi
  windows-supervisor-service-test:
    runs-on: windows-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ~1.22.7
          cache: false
      - name: Cache Go
        uses: actions/cache@v4
        env:
          cache-name: cache-go-modules
        with:
          path: |
            ~\go\pkg\mod
            ~\AppData\Local\go-build
          key: go-build-cache-${{ runner.os }}-${{ matrix.group }}-go-${{ hashFiles('**/go.sum') }}
      - name: Ensure required ports in the dynamic range are available
        run: |
          & ${{ github.workspace }}\.github\workflows\scripts\win-required-ports.ps1
      - name: Make otelcontribcol
        run: make otelcontribcol
      - name: Build supervisor
        run: cd cmd/opampsupervisor; go build
      - name: Install supervisor as a service
        run: |
          New-Service -Name "opampsupervisor" -StartupType "Manual" -BinaryPathName "${PWD}\cmd\opampsupervisor --config ${PWD}\cmd\opampsupervisor\supervisor\testdata\supervisor_windows_service_test_config.yaml\"
          eventcreate.exe /t information /id 1 /l application /d "Creating event provider for 'opampsupervisor'" /so opampsupervisor
      - name: Test supervisor service
        working-directory: ${{ github.workspace }}/cmd/opampsupervisor
        run: |
          go test -timeout 90s -run ^TestSupervisorAsService$ -v -tags=win32service
      - name: Remove opampsupervisor service
        if: always()
        run: |
          Remove-Service opampsupervisor
          Remove-Item HKLM:\SYSTEM\CurrentControlSet\Services\EventLog\Application\opampsupervisor

